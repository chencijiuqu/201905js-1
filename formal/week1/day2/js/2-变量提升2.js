// 变量提升
// js代码执行前，对所有声明的变量 进行提前的声明或定义；带var的是只声明不定义，带function的声明加定义

// 对于带var的在变量提升时，只声明不赋值，所以变量的默认值是undefined；
// 对于带function的在变量提升时，提前声明并且赋值
// 完成变量提升后，代码才开始执行

console.log(num); // undefined

var num = 12; // 赋值操作，只在执行到这一行时，num才被赋值为12；
var obj = {
	name: "珠峰",
	age: '10'
};
console.log(zf);
function zf(str) {
	var age = 10;
	console.log(str, age);
}
zf('珠峰');

// js的运行机制及原理：
// js运行的环境（栈内存）：作用域
// 作用域是js运行的环境，另外一个功能是保存基本数据类型。在js中作用域分为：
// 全局作用域 ：当页面打开时，首先形成一个全局作用域，执行全局中的代码，全局作用域是window；
// 私有作用域（函数作用域）当函数执行时，会形成一个函数作用域，这个作用域用来保存函数中的基本数据类型同时执行函数代码；
// 块级作用域（类似私有作用域 ES6）

// js代码执行过程
// 在js代码执行前，浏览器会开辟一个全局作用域，然后执行变量提升，完成变量提升操作后，代码开始从上到下开始执行；
// 当执行时，如果遇到基本数据类型，就在作用域中存储该基本数据类型；
// 如果遇到引用数据类型，则浏览器会再次分配一个堆内存，然后把引用数据类型的内容存储到堆内存中，接下来再把这个堆内存的地址赋值给变量（此时这个地址是存储在作用域内存中的）；
// 遇到函数执行时，会经历以下几步：
// 1. 浏览器开辟一个私有作用域；
// 2. 形参赋值，把执行时的实参赋值给函数形参变量；
// 3. 私有作用域中变量提升
// 4. 函数代码从上到下执行

// 私有变量和全局变量
// 全局变量：在全局作用域中声明的变量
// 私有变量：函数的形参以及在函数私有作用域中声明的变量

// 预解释只发生在当前作用域，如果函数不执行时，函数中的变量不会进行变量提升。

function fn() {
	var num = 13;
}
console.log(num); // 报错：因为预解释发生在当前作用域中，而当前作用域没有num的变量，num是fn的私有变量。











