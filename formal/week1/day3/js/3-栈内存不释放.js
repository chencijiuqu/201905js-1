// 函数栈内存：正常情况下，函数执行会形成一个栈内存（作用域），当函数执行完成就会自动销毁。

// 但是函数执行完成后，当前形成的栈内存中，某些内容被栈内存以外的变量占用了，此时栈内存不能释放（一旦释放外面找不到原有的内容了）。栈内存不销毁，保存在栈内存中的数据也不会被销毁

// 1 函数返回值被占用
function fe() {
	return {
		name: "珠峰培训"
	}
}
var obj = fe(); // 函数fe执行形成一个不销毁的栈内存，里面定义的对象被外部obj变量占用，因而作用域不销毁

fe(); // 他们正常形成栈内存，但是执行后会被销毁

// 2.函数内部的引用数据类型被外部占用，函数执行的作用域不销毁。

var x = null;

function fn() {
	x = {
		name: 'zf'
	}
};
fn(); // 此时x占用着fn的作用域中对象{name: 'zf'}



